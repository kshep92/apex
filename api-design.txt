class Main {

 def app = new ApexApplication(new MyConfigurationModule());

 app.parseCookies(); // Shortcut for app.addHandler(CookieHandler.create());

 app.parseRequestBody(); // Shortcut for app.addHander(BodyHandler.create(), HttpMethod.POST, HttpMethod.PUT, HttpMethod.PATCH);

 app.static('/assets/*') // Default Handler

 // Or

 app.static('/assets/*, new StaticHandlerOptions(cacheSize: 300)) // Proxy for StaticHandler.create()

 app.before("/secured", context -> { /* check for authentication */ } );

 app.put('/users/:id', { ctx ->
   def dao = ctx.getInstance(DAO.class)
   def user = dao.findById(ctx.getParam('id').intValue())
 })

 app.get("/", context -> { context.sendFile("views/index.html"); });

 app.get("/view", context -> { context.render("dashboard.html", [email: 'kevin@mail.com']) }) // Rendering a view. We will use MVEL by default.

 app.post("/users", { ctx -> /* Handle form data */ } );

 app.mount("/admin", AdminRoutes.class);

 app.listen(3000);

}

// Router

class AdminRoutes extends com.reviselabs.apex.web.ApexRouter {

  {
    before("/something", ctx -> { /* Run a before filter */ });

    get("/", ctx -> {});

  }

}

Settings that need to be set:
- View engine/renderer (also accessible via a renderer property to do HTML rendering
out side of the context of a request; Useful for email template rendering.)
- Templates folder

app.setTemplateEngine(new FremarkerTemplateEngine(cache: 2, ...))